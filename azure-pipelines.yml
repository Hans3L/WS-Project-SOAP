# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
- repo: self

variables:
  # Conexión del servicio de registro de contenedores establecida durante la creación de la canalización
  #dockerRegistryServiceConnection: '{{ containerRegistryConnection.Id }}'
  dockerRegistryServiceConnection: serviceDockerHub
  #imageRepository: '{{#toAlphaNumericString imageRepository 50}}{{/toAlphaNumericString}}'
  imagenRepository: 'ws-project'
  #containerRegistry: '{{ containerRegistryConnection.Authorization.Parameters.loginServer }}'
  containerRegistry: serviceDockerHub
  #dockerfilePath: '{{ dockerfilePath }}'
  dockerfilePath: '**/Dockerfile'
  #tag: '$(Build.BuildId)'
  #tag: 
  #nameSpaceContainerRegistry: '{{nameSpaceContainerRegistry}}'
  #artifact_id: '{{artifact_id}}'
  #artifact_version: '{{artifact_version}}'
  nameSpaceContainerRegistry: h4ns3l
  artifact_id: 'ws-project'
  artifact_version: '1.1'

jobs:

- job: CreateImageCompilePom
  displayName: Comienzo del jobs

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Maven@3
    displayName: 'Compilacion con Maven al pom'
    inputs:
      mavenPomFile: 'pom.xml'
      javaHomeOption: 'JDKVersion'
      mavenOpts: -Xmx1024m
      jdkVersionOption: '1.8'
      mavenSetM2Home: false
      pmdAnalysisEnabled: false
      #testResultsFiles: '**/surefire-reports/TEST-*.xml'
      findbugsAnalysisEnabled: false
      goals: 'package'
  - script: |
      echo Finalizo la compilacion de Maven.

  - task: Docker@2
    displayName: 'Compilar el DockerFile'
    condition: 'succeeded()'
    inputs:
      containerRegistry: serviceDockerHub
      repository: ''
      command: build
      dockerfile: $(dockerfilePath)
      buildContext: '**'
      tags: ''
      arguments:  --build-arg artifact_id=$(artifact_id) --build-arg artifact_version=$(artifact_version) -t $(artifact_id):$(artifact_version)
      addPipelineData: true
  - script: |
      echo Finaliza la compilación
      docker images

  - task: Docker@1
    displayName: 'Tageo de imagen creada por Dockerfile'
    condition: 'succeeded()'
    inputs:
      command: Tag image
      dockerRegistryEndpoint: serviceDockerHub
      arguments: '$(nameSpaceContainerRegistry)/$(artifact_id):$(artifact_version)'
      imageName: $(artifact_id):$(artifact_version)
      pushMultipleImages: false
      tagMultipleImages: false

  - task: Docker@2
    displayName: 'Logueado a Container Registry Docker'
    condition: 'succeeded()'
    inputs:
      command: login
      containerRegistry: serviceDockerHub
  - script: |
      echo Se logueo correctamente
      echo Listar posición actual
      ls -s
      echo Donde nos encontramos
      pwd
  - task: Docker@2
    displayName: 'Empuje imagen tageada a Docker Registry'
    condition: 'succeeded()'
    inputs:
      containerRegistry: serviceDockerHub
      repository: '$(nameSpaceContainerRegistry)/$(artifact_id):$(artifact_version)'
      command: push
      #Dockerfile: '**/Dockerfile'
      #buildContext: '**'
      tags: ''
      arguments: ''
  - script: |
      echo Se logueo correctamente
      echo Listar posición actual
      ls -s
      echo Donde nos encontramos
      pwd